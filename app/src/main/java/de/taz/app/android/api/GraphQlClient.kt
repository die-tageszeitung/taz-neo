package de.taz.app.android.api

import android.content.Context
import androidx.annotation.VisibleForTesting
import com.squareup.moshi.JsonEncodingException
import de.taz.app.android.GRAPHQL_ENDPOINT
import de.taz.app.android.TAZ_AUTH_HEADER
import de.taz.app.android.annotation.Mockable
import de.taz.app.android.api.dto.DataDto
import de.taz.app.android.api.dto.WrapperDto
import de.taz.app.android.api.variables.Variables
import de.taz.app.android.singletons.AuthHelper
import de.taz.app.android.singletons.JsonHelper
import de.taz.app.android.util.SingletonHolder
import de.taz.app.android.util.awaitCallback
import de.taz.app.android.singletons.OkHttp
import de.taz.app.android.util.reportAndRethrowExceptions
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.RequestBody.Companion.toRequestBody
import kotlin.Throws

/**
 * class to get DTOs from the [GRAPHQL_ENDPOINT]
 */
@Mockable
class GraphQlClient @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE) constructor(
    private val okHttpClient: OkHttpClient,
    private val url: String,
    private val queryService: QueryService,
    private val authHelper: AuthHelper
) {
    private constructor(applicationContext: Context) : this(
        okHttpClient = OkHttp.client,
        url = GRAPHQL_ENDPOINT,
        queryService = QueryService.getInstance(applicationContext),
        authHelper = AuthHelper.getInstance(applicationContext)
    )

    private val unrecoverableGraphQlErrorCategories = listOf("businessLogic", "graphql ")

    companion object : SingletonHolder<GraphQlClient, Context>(::GraphQlClient)

    /**
     * function to get DTO from query
     * @param queryType - the type of the query to execute
     * @param variables - the variables to set on query
     * @return the [DataDto] generated by parsing the returned json with moshi
     */
    @Throws(
        MalformedServerResponseException::class,
        GraphQlImplementationException::class,
        GraphQlRecoverableServerException::class
    )
    suspend fun query(queryType: QueryType, variables: Variables? = null): WrapperDto =
        withContext(Dispatchers.IO) {
            val query = queryService.get(queryType)
            variables?.let { query.variables = variables }

            val body = query.toJson().toRequestBody("application/json".toMediaType())

            // build request
            val requestBuilder = Request.Builder()
            authHelper.token?.let {
                if (it.isNotEmpty()) {
                    requestBuilder.addHeader(TAZ_AUTH_HEADER, it)
                }
            }

            requestBuilder.addHeader("Accept", "application/json, */*").url(url).post(body)

            val response = awaitCallback(okHttpClient.newCall(requestBuilder.build())::enqueue)
            val wrapper = try {
                val source = response.body!!.source()
                val dataWrapper = JsonHelper.adapter<WrapperDto>().fromJson(source)!!
                source.close()
                dataWrapper
            } catch (e: NullPointerException) {
                reportAndRethrowExceptions {
                    throw MalformedServerResponseException(e)
                }
            } catch (e: JsonEncodingException) {
                reportAndRethrowExceptions {
                    throw MalformedServerResponseException(e)
                }
            }

            if (wrapper.errors.isNotEmpty()) {
                if (wrapper.errors.findLast { item ->
                        unrecoverableGraphQlErrorCategories.contains(item.extensions?.category)
                    } != null) {
                    log.error("A faulty response from graphQL received ${wrapper.errors}")
                    throw GraphQlImplementationException(wrapper)
                } else {
                    throw GraphQlRecoverableServerException(wrapper)
                }
            }

            // if response carries authinfo we save it
            wrapper.data?.product?.authInfo?.let {
                authHelper.authStatus = it.status
            }
            wrapper
        }

    class MalformedServerResponseException(cause: Throwable? = null) :
        Exception("GraphQL server returned unexpected response", cause)

    class GraphQlImplementationException(wrapperDto: WrapperDto?) :
        Exception("An unrecoverable GraphQL exception occured: $wrapperDto")

    class GraphQlRecoverableServerException(wrapperDto: WrapperDto?) :
        Exception("A probably recoverable error occured: $wrapperDto")
}
