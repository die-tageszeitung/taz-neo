package de.taz.app.android.api

import android.content.Context
import androidx.annotation.VisibleForTesting
import com.squareup.moshi.JsonEncodingException
import de.taz.app.android.GRAPHQL_ENDPOINT
import de.taz.app.android.TAZ_AUTH_HEADER
import de.taz.app.android.api.dto.DataDto
import de.taz.app.android.api.dto.WrapperDto
import de.taz.app.android.api.variables.Variables
import de.taz.app.android.singletons.AuthHelper
import de.taz.app.android.singletons.JsonHelper
import de.taz.app.android.util.SingletonHolder
import de.taz.app.android.util.awaitCallback
import de.taz.app.android.singletons.OkHttp
import io.sentry.Sentry
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.OkHttpClient
import okhttp3.RequestBody.Companion.toRequestBody

/**
 * class to get DTOs from the [GRAPHQL_ENDPOINT]
 */
class GraphQlClient @VisibleForTesting(otherwise = VisibleForTesting.PRIVATE) constructor(
    private val okHttpClient: OkHttpClient,
    private val url: String,
    private val queryService: QueryService,
    private val authHelper: AuthHelper
) {
    private constructor(applicationContext: Context) : this(
        okHttpClient = OkHttp.getInstance(applicationContext).client,
        url = GRAPHQL_ENDPOINT,
        queryService = QueryService.getInstance(applicationContext),
        authHelper = AuthHelper.getInstance(applicationContext)
    )

    companion object : SingletonHolder<GraphQlClient, Context>(::GraphQlClient)

    /**
     * function to get DTO from query
     * @param queryType - the type of the query to execute
     * @param variables - the variables to set on query
     * @return the [DataDto] generated by parsing the returned json with moshi
     */
    @Throws(JsonEncodingException::class)
    suspend fun query(queryType: QueryType, variables: Variables? = null): DataDto? =
        withContext(Dispatchers.IO) {
            queryService.get(queryType)?.let { query ->
                variables?.let { query.variables = variables }

                val body = query.toJson().toRequestBody("application/json".toMediaType())

                // build request
                val requestBuilder = Request.Builder()
                if (authHelper.token.isNotEmpty()) {
                    requestBuilder.addHeader(TAZ_AUTH_HEADER, authHelper.token)
                }
                requestBuilder.addHeader("Accept", "application/json, */*").url(url).post(body)

                val response = awaitCallback(okHttpClient.newCall(requestBuilder.build())::enqueue)
                response.body?.source()?.let { source ->
                    val wrapper = JsonHelper.adapter<WrapperDto>().fromJson(source)
                    source.close()
                    if (wrapper?.data == null) {
                        val errorString = wrapper?.errors.toString()
                        log.error(errorString)
                        Sentry.capture(errorString)
                    }
                    wrapper?.data
                }
            }
        }
}
