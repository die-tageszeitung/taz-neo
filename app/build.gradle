plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version '3.7.0'
    id 'io.sentry.android.gradle' version '3.4.2'
    id 'com.google.devtools.ksp' version '1.8.0-1.0.9'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'

    // FIXME (johannes): kapt is still required for glide as its ksp support is not working for
    //                   as expected. Tested on glide version 4.14.2
    //                   Note: ksp is promised to be faster then kapt while handling annotations during build
    id 'kotlin-kapt'
}

// WARNING: this will apply the Google Services plugin based on the gradle command,
// so we must never call any assembleNonfree... together with any assembleFree... task
def taskNames = getGradle().getStartParameter().getTaskNames()
if (taskNames.any { it.contains('Nonfree')}) {
    if (taskNames.any { it.contains('Free') }) {
        throw new GradleException('Free and Nonfree build tasks must not be mixed')
    }

    println 'Applying Google Services Plugin'
    apply plugin: 'com.google.gms.google-services'
}

// Version names and codes will be derived from the git tags.
// See VersionHelper class and README for more information
import de.taz.android.VersionHelper
def tazVersionName = VersionHelper.INSTANCE.getTazVersionName()
def tazVersionCode = VersionHelper.INSTANCE.getTazVersionCode()
def lmdVersionName = VersionHelper.INSTANCE.getLmdVersionName()
def lmdVersionCode = VersionHelper.INSTANCE.getLmdVersionCode()

logger.quiet("Taz versionName: $tazVersionName versionCode: $tazVersionCode")
logger.quiet("Lmd versionName: $lmdVersionName versionCode: $lmdVersionCode")


android {
    namespace 'de.taz.app.android'
    compileSdkVersion 33

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "de.taz.app.android"
        minSdkVersion 21
        targetSdkVersion 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        ksp {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
            arg("room.incremental", "true")
        }

        testOptions {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
        }

        vectorDrawables.useSupportLibrary = true
        resConfigs 'de'

        buildConfigField "Boolean", "MANUAL_UPDATE", "false"
        buildConfigField "Boolean", "IS_NON_FREE", "false"
        buildConfigField "Boolean", "IS_LMD", "false"
        buildConfigField "Boolean", "IS_LOADING_PDF_ADDITIONALLY", "false"
        buildConfigField "String", "DISPLAYED_FEED", "\"taz\""

        def ENV = System.getenv()
        def sentryEnvironment = ENV['SENTRY_ENVIRONMENT'] ?: 'local'
        println "Sentry environment: $sentryEnvironment"
        buildConfigField "String", "SENTRY_ENVIRONMENT", "\"${sentryEnvironment}\""
    }


    compileOptions {
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-opt-in=kotlinx.serialization.ExperimentalSerializationApi"
    }

    // Define separate signingConfigs.
    // If the .properties file is not found the config will be invalid and fail on build,
    // but it still can be referenced by name as signingConfigs.taz and the gradle file remains valid.
    signingConfigs {
        taz {
            file("../tazkeystore.properties").with { propFile ->
                if (propFile.exists()) {
                    def properties = new Properties()
                    properties.load(new FileInputStream(propFile))
                    storeFile file('../' + properties['keystorePath'])
                    storePassword properties['keystorePassword']
                    keyAlias properties['keyAlias']
                    keyPassword properties['keyPassword']
                }
            }
        }

        lmd {
            file("../lmdkeystore.properties").with { propFile ->
                if (propFile.exists()) {
                    def properties = new Properties()
                    properties.load(new FileInputStream(propFile))
                    storeFile file('../' + properties['keystorePath'])
                    storePassword properties['keystorePassword']
                    keyAlias properties['keyAlias']
                    keyPassword properties['keyPassword']
                }
            }
        }
    }


    flavorDimensions "source", "owner", "graphql"

    productFlavors {
        free {
            dimension "source"
            applicationIdSuffix ".free"
        }

        nonfree {
            dimension "source"
            buildConfigField "Boolean", "IS_NON_FREE", "true"
        }

        taz {
            dimension "owner"
            applicationId "de.taz.android.app"
            versionCode tazVersionCode
            versionName tazVersionName

            buildConfigField "String", "GRAPHQL_ENDPOINT", "\"taz.de/appGraphQl\""
            buildConfigField "String", "DISPLAYED_FEED", "\"taz\""
            // Set the default signingConfig for taz flavors.
            // Might be overwritten by buildTypes directives.
            signingConfig signingConfigs.taz
        }

        lmd {
            dimension "owner"
            applicationId "de.monde_diplomatique.android.app"
            versionCode lmdVersionCode
            versionName lmdVersionName

            buildConfigField "String", "GRAPHQL_ENDPOINT", "\"monde-diplomatique.de/appGraphQl\""
            buildConfigField "Boolean", "IS_LMD", "true"
            buildConfigField "Boolean", "IS_LOADING_PDF_ADDITIONALLY", "true"
            buildConfigField "String", "DISPLAYED_FEED", "\"LMd\""
            // Set the default signingConfig for lmd flavors.
            // Might be overwritten by buildTypes directives.
            signingConfig signingConfigs.lmd
        }

        staging {
            applicationIdSuffix ".staging"
            dimension "graphql"
            buildConfigField "String", "GRAPHQL_ENDPOINT_PREFIX", "\"https://testdl.\""
        }

        production {
            dimension "graphql"
            buildConfigField "String", "GRAPHQL_ENDPOINT_PREFIX", "\"https://dl.\""
        }
    }

    // Adds only the resource folders nonfreeLmd [and freeLmd] to the the source sets of all possible
    // build variants nonfreeLmdProductionDebug, nonfreeLmdProductionRelease, ...
    // This does not add stuff like AndroidManifest.xml, etc.
    sourceSets.all { sourceSet ->
        if (sourceSet.name.toLowerCase().contains('nonfreelmd')) {
            sourceSet.res.srcDirs += files("$projectDir/src/nonfreeLmd/res")
        } else if (sourceSet.name.toLowerCase().contains('freelmd')) {
            sourceSet.res.srcDirs += files("$projectDir/src/freeLmd/res")
        }
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Use the default debug signing config provided by Android
            // This will overwrite any signingConfig setting from the productFlavors, as the
            // buildTypes directives have higher priority.
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Uses the signingConfig defined in productFlavors
        }
        leakCanary {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug', 'release']
            // Use the default debug signing config provided by Android
            signingConfig signingConfigs.debug
        }
        unminifiedRelease {
            minifyEnabled false
            matchingFallbacks = ['release']
            // Use the default debug signing config provided by Android
            signingConfig signingConfigs.debug
        }
        manualUpdateRelease {
            buildConfigField "Boolean", "MANUAL_UPDATE", "true"
            minifyEnabled false
            matchingFallbacks = ['release']
            // Uses the signingConfig defined in productFlavors
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    // Publish the app to the Google Play store using https://github.com/Triple-T/gradle-play-publisher
    // The configuration is part of the secret bundle downloaded by the gitlab ci pipeline.
    // The plugin provides the publishNonfreeTazProductionReleaseBundle gradle task called from the ci
    play {
        // Disable play publishing for all builds by default. Some specific release variants are enabled below.
        enabled.set(false)
    }

    playConfigs {
        nonfreeTazProductionRelease {
            enabled.set(true)
            track.set('internal')
            serviceAccountCredentials.set(file('../taz-play-publish.json'))
        }

        nonfreeLmdProductionRelease {
            enabled.set(true)
            track.set('internal')
            // FIXME (johannes): we are currently using the same service account for taz and lmd. See https://gitlab.alt.coop/taz/taz-app/-/issues/195
            serviceAccountCredentials.set(file('../taz-play-publish.json'))
        }
    }

    packagingOptions {
        resources {
            pickFirsts += ['META-INF/AL2.0', 'META-INF/LGPL2.1', 'win32-x86/attach_hotspot_windows.dll', 'win32-x86-64/attach_hotspot_windows.dll', 'META-INF/licenses/ASM']
        }
    }

    lint {
        lintConfig file('lint.xml')
    }
}

dependencies {
    def coroutines_version = '1.6.4'
    def glide_version = '4.14.2'
    def ktor_version = '2.2.3'
    def lifecycle_version = '2.5.1'
    def mockito_version = '4.6.1'
    def powermock_version = '2.0.9'
    def room_version = '2.5.0'
    def work_version = '2.8.0'
    def exoplayer_version = '2.18.2'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'androidx.core:core-splashscreen:1.0.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.4.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.collection:collection-ktx:1.2.0'
    implementation "androidx.datastore:datastore-preferences:1.0.0"

    implementation 'androidx.fragment:fragment-ktx:1.5.5'

    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.github.valkriaine:Bouncy:2.3'

    implementation "com.github.bumptech.glide:glide:$glide_version"
    // FIXME (johannes): use ksp once it works. see comment above
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation 'androidx.autofill:autofill:1.1.0'

    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    implementation 'androidx.browser:browser:1.5.0'

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation("io.ktor:ktor-network-jvm:$ktor_version") {
        because "We use io.ktor.network.sockets.SocketTimeoutException on ConnectivityException which is only defined on this module"
    }
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"
    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
    testImplementation "io.ktor:ktor-client-mock:$ktor_version"
    androidTestImplementation "io.ktor:ktor-client-mock:$ktor_version"

    implementation 'org.conscrypt:conscrypt-android:2.5.2'

    implementation 'com.google.android.material:material:1.8.0'

    // coverflow
    implementation 'com.github.rubensousa:gravitysnaphelper:2.2.2'

    // stetho debug bridge
    implementation 'com.facebook.stetho:stetho:1.6.0'

    // mupdf
    implementation 'com.artifex.mupdf:fitz:1.20.2'

    // error reports
    implementation 'io.sentry:sentry-android:5.4.0'
    implementation 'org.slf4j:slf4j-nop:1.7.30'

    // animations
    implementation 'com.airbnb.android:lottie:5.2.0'

    // iban validation
    implementation 'nl.garvelink.oss:iban:1.12.0'

    // media player
    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayer_version"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoplayer_version"

    // testing
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
    androidTestImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "org.powermock:powermock-core:$powermock_version"
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$powermock_version"

    // Core library
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.2'


    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'

    def espressoVersion = '3.5.1'
    // Espresso dependencies
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-accessibility:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation "androidx.test.espresso.idling:idling-concurrent:$espressoVersion"

    // Idling resources are also in production code
    implementation "androidx.test.espresso:espresso-idling-resource:$espressoVersion"

    // room
    androidTestImplementation "androidx.room:room-testing:$room_version"

    // leak canary
    leakCanaryImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'

    // google Flavor
    nonfreeImplementation 'com.google.firebase:firebase-messaging:23.1.1'

    // add Java 8+ API desugaring support
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.0'
}

sentry {
    // Enables or disables the automatic upload of mapping files
    // during a build.  If you disable this you'll need to manually
    // upload the mapping files with sentry-cli when you do a release.
    autoUpload = true
}



apply plugin: 'kotlin-allopen'
allOpen {
    annotation('de.taz.app.android.annotation.Mockable')
}


task generateStaticVersionInBuildGradle {
    doLast {
        println "Injecting build static build version to enable manifest parsing (for f-droid)"
        def scriptPath = buildscript.sourceFile.parentFile
        def injectVersions = "$scriptPath/inject_static_version.sh $tazVersionName $tazVersionCode $lmdVersionName $lmdVersionCode $buildscript.sourceFile.path".execute()
        injectVersions.waitForProcessOutput(System.out, System.err)
    }
}
