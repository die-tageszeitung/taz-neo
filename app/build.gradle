plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'

    id 'org.jetbrains.kotlin.plugin.parcelize'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'org.jetbrains.kotlin.plugin.allopen'

    // Must be in sync with the "def room_version" below
    id 'androidx.room' version '2.6.1'
    id 'com.github.triplet.play' version '3.9.1'

    // Only define the google-services globally, and apply them only for nonfree variants
    id 'com.google.gms.google-services' version "4.4.2" apply false

    // Only define the sentry version globally, and apply it only for nonfree variants
    id 'io.sentry.android.gradle' version '3.14.0' apply false
}

// WARNING: this will apply the Google Services plugin based on the gradle command,
// so we must never call any assembleNonfree... together with any assembleFree... task
def taskNames = getGradle().getStartParameter().getTaskNames()
if (taskNames.any { it.contains('Nonfree')}) {
    if (taskNames.any { it.contains('Free') }) {
        throw new GradleException('Free and Nonfree build tasks must not be mixed')
    }

    println 'Applying Google Services Plugin'
    apply plugin: 'com.google.gms.google-services'


    println 'Applying Sentry Plugin'
    apply plugin: 'io.sentry.android.gradle'
    sentry {
        // Enables or disables the automatic upload of mapping files
        // during a build.  If you disable this you'll need to manually
        // upload the mapping files with sentry-cli when you do a release.
        autoUpload = true
    }

}

import org.jetbrains.kotlin.gradle.dsl.JvmTarget

// Version names and codes will be derived from the git tags.
// See VersionHelper class and README for more information
import de.taz.android.VersionHelper
def tazVersionName = VersionHelper.INSTANCE.getTazVersionName()
def tazVersionCode = VersionHelper.INSTANCE.getTazVersionCode()
def lmdVersionName = VersionHelper.INSTANCE.getLmdVersionName()
def lmdVersionCode = VersionHelper.INSTANCE.getLmdVersionCode()

logger.quiet("Taz versionName: $tazVersionName versionCode: $tazVersionCode")
logger.quiet("Lmd versionName: $lmdVersionName versionCode: $lmdVersionCode")

android {
    namespace 'de.taz.app.android'
    compileSdk 34

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    defaultConfig {
        applicationId "de.taz.app.android"
        minSdkVersion 21
        targetSdkVersion 34

        testOptions {
            unitTests {
                includeAndroidResources = true
            }
        }

        vectorDrawables.useSupportLibrary = true
        resourceConfigurations += ['de']

        buildConfigField "Boolean", "MANUAL_UPDATE", "false"
        buildConfigField "Boolean", "IS_NON_FREE", "false"
        buildConfigField "Boolean", "IS_LMD", "false"
        buildConfigField "Boolean", "IS_LOADING_PDF_ADDITIONALLY", "false"
        buildConfigField "String", "DISPLAYED_FEED", "\"taz\""

        def ENV = System.getenv()
        def sentryEnvironment = ENV['SENTRY_ENVIRONMENT'] ?: 'local'
        println "Sentry environment: $sentryEnvironment"
        buildConfigField "String", "SENTRY_ENVIRONMENT", "\"${sentryEnvironment}\""
    }


    compileOptions {
        // Sets Java compatibility to Java 17
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
    }

    kotlin {
        compilerOptions {
            jvmTarget.set(JvmTarget.JVM_17)
        }
    }

    // Define separate signingConfigs.
    // If the .properties file is not found the config will be invalid and fail on build,
    // but it still can be referenced by name as signingConfigs.taz and the gradle file remains valid.
    signingConfigs {
        taz {
            file("../tazkeystore.properties").with { propFile ->
                if (propFile.exists()) {
                    def properties = new Properties()
                    properties.load(new FileInputStream(propFile))
                    storeFile file('../' + properties['keystorePath'])
                    storePassword properties['keystorePassword']
                    keyAlias properties['keyAlias']
                    keyPassword properties['keyPassword']
                }
            }
        }

        lmd {
            file("../lmdkeystore.properties").with { propFile ->
                if (propFile.exists()) {
                    def properties = new Properties()
                    properties.load(new FileInputStream(propFile))
                    storeFile file('../' + properties['keystorePath'])
                    storePassword properties['keystorePassword']
                    keyAlias properties['keyAlias']
                    keyPassword properties['keyPassword']
                }
            }
        }
    }


    flavorDimensions "source", "owner", "graphql"

    productFlavors {
        free {
            dimension "source"
            applicationIdSuffix ".free"
        }

        nonfree {
            dimension "source"
            buildConfigField "Boolean", "IS_NON_FREE", "true"
        }

        taz {
            dimension "owner"
            applicationId "de.taz.android.app"
            versionCode tazVersionCode
            versionName tazVersionName

            buildConfigField "String", "GRAPHQL_ENDPOINT", "\"taz.de/appGraphQl\""
            buildConfigField "String", "DISPLAYED_FEED", "\"taz\""
            // Set the default signingConfig for taz flavors.
            // Might be overwritten by buildTypes directives.
            signingConfig signingConfigs.taz
        }

        lmd {
            dimension "owner"
            applicationId "de.monde_diplomatique.android.app"
            versionCode lmdVersionCode
            versionName lmdVersionName

            buildConfigField "String", "GRAPHQL_ENDPOINT", "\"monde-diplomatique.de/appGraphQl\""
            buildConfigField "Boolean", "IS_LMD", "true"
            buildConfigField "Boolean", "IS_LOADING_PDF_ADDITIONALLY", "true"
            buildConfigField "String", "DISPLAYED_FEED", "\"LMd\""
            // Set the default signingConfig for lmd flavors.
            // Might be overwritten by buildTypes directives.
            signingConfig signingConfigs.lmd
        }

        staging {
            applicationIdSuffix ".staging"
            dimension "graphql"
            buildConfigField "String", "GRAPHQL_ENDPOINT_PREFIX", "\"https://testdl.\""
        }

        production {
            dimension "graphql"
            buildConfigField "String", "GRAPHQL_ENDPOINT_PREFIX", "\"https://dl.\""
        }
    }

    // Adds explicit nonfreeTaz and nonfreeLmd resource folders to all nonfree* build variants.
    // This does not add stuff like AndroidManifest.xml, etc.
    sourceSets.configureEach { sourceSet ->
        def name = sourceSet.name.toLowerCase()

        // The test variants are not using the resource sourceSets from the main variant at all,
        // so we must not add additional resource dirs, as they can't resolve references to values
        // defined for example the main dimens.xml
        if (name.startsWith("test") || name.startsWith("androidtest")) {
            return
        }

        if (name.contains('nonfreetaz')) {
            sourceSet.res.srcDirs += files("$projectDir/src/nonfreeTaz/res")
        } else if (name.contains('nonfreelmd')) {
            sourceSet.res.srcDirs += files("$projectDir/src/nonfreeLmd/res")
        }
    }

    // Configure room library
    room {
        schemaDirectory "$projectDir/schemas"
    }

    sourceSets {
        // Add the SQL schema files to the debug assets to allow for testing the migrations in unitTests with robolectric
        // Unfortunately adding them to test.assets.srcDirs does not work as the Android-Gradle-Plugin is ignoring them
        debug.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    buildTypes {

        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Use the default debug signing config provided by Android
            // This will overwrite any signingConfig setting from the productFlavors, as the
            // buildTypes directives have higher priority.
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Uses the signingConfig defined in productFlavors
        }
        leakCanary {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug', 'release']
            // Use the default debug signing config provided by Android
            signingConfig signingConfigs.debug
        }
        unminifiedRelease {
            minifyEnabled false
            matchingFallbacks = ['release']
            // Use the default debug signing config provided by Android
            signingConfig signingConfigs.debug
        }
        manualUpdateRelease {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "Boolean", "MANUAL_UPDATE", "true"
            matchingFallbacks = ['release']
            // Uses the signingConfig defined in productFlavors
        }
    }

    // Ignore unused variants to make the Build Variant selector in the IDE a little bit cleaner
    variantFilter { variant ->
        def flavorNames = variant.flavors*.name
        def buildType = variant.buildType.name.toString()
        if (buildType == "manualUpdateRelease" && flavorNames.contains("free")
                || buildType == "manualUpdateRelease" && flavorNames.contains("staging")
                || buildType == "unminifiedRelease" && flavorNames.contains("nonfree")
                || buildType == "unminifiedRelease" && flavorNames.contains("staging")
                || buildType == "leakCanary") {
            variant.setIgnore(true)
        }
    }

    // Publish the app to the Google Play store using https://github.com/Triple-T/gradle-play-publisher
    // The configuration is part of the secret bundle downloaded by the gitlab ci pipeline.
    // The plugin provides the publishNonfreeTazProductionReleaseBundle gradle task called from the ci
    play {
        // Disable play publishing for all builds by default. Some specific release variants are enabled below.
        enabled.set(false)
    }

    playConfigs {
        nonfreeTazProductionRelease {
            enabled.set(true)
            track.set('internal')
            serviceAccountCredentials.set(file('../taz-play-publish.json'))
        }

        nonfreeLmdProductionRelease {
            enabled.set(true)
            track.set('internal')
            // FIXME (johannes): we are currently using the same service account for taz and lmd. See https://gitlab.alt.coop/taz/taz-app/-/issues/195
            serviceAccountCredentials.set(file('../taz-play-publish.json'))
        }
    }

    packagingOptions {
        resources {
            pickFirsts += ['META-INF/AL2.0', 'META-INF/LGPL2.1', 'win32-x86/attach_hotspot_windows.dll', 'win32-x86-64/attach_hotspot_windows.dll', 'META-INF/licenses/ASM']
        }
    }

    lint {
        lintConfig file('lint.xml')
    }
}

dependencies {
    def coroutines_version = '1.8.1'
    def serialization_version = '1.6.3'
    def glide_version = '4.16.0'
    def ktor_version = '2.3.11'
    def lifecycle_version = '2.8.1'
    def room_version = '2.6.1'
    def work_version = '2.9.0'
    def media3_version = '1.3.1'

    // implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'androidx.core:core-splashscreen:1.0.1'

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$serialization_version"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-guava:$coroutines_version"


    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.core:core-ktx:1.13.1'

    implementation 'androidx.collection:collection-ktx:1.4.0'
    implementation 'androidx.datastore:datastore-preferences:1.1.1'

    implementation 'androidx.fragment:fragment-ktx:1.7.1'

    implementation 'androidx.recyclerview:recyclerview:1.3.2'

    implementation "com.github.bumptech.glide:glide:$glide_version"
    ksp "com.github.bumptech.glide:ksp:$glide_version"

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation 'androidx.autofill:autofill:1.1.0'

    implementation 'androidx.viewpager2:viewpager2:1.1.0'

    implementation 'androidx.browser:browser:1.8.0'

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation("io.ktor:ktor-network-jvm:$ktor_version") {
        because "We use io.ktor.network.sockets.SocketTimeoutException on ConnectivityException which is only defined on this module. " +
                "Although unused we keep it here in case we want switch to the ktor CIO engine"
    }
    implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"
    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
    testImplementation "io.ktor:ktor-client-mock:$ktor_version"

    implementation 'org.conscrypt:conscrypt-android:2.5.2'

    implementation('com.google.android.material:material:1.11.0') {
        because "1.12.0 forces shape clipping on the NavigationView which prevents from showing the taz logo outside of it"
    }

    // coverflow
    implementation 'com.github.rubensousa:gravitysnaphelper:2.2.2'

    // mupdf
    implementation 'com.artifex.mupdf:fitz:1.23.7'

    // error reports
    nonfreeImplementation('io.sentry:sentry-android:6.34.0') {
        because "Our self hosted sentry server is not running >22.12.0 yet which is required for >7.0.0"
        // update plugins { id 'io.sentry.android.gradle' ... } too
    }
    implementation 'org.slf4j:slf4j-nop:2.0.13'

    // semver parsing
    implementation 'com.vdurmont:semver4j:3.1.0'

    // Audioplayer
    implementation "androidx.media3:media3-exoplayer:$media3_version"
    implementation "androidx.media3:media3-session:$media3_version"
    implementation "androidx.media3:media3-ui:$media3_version"

    // Matomo tracking
    nonfreeImplementation 'com.github.matomo-org:matomo-sdk-android:4.1.4'

    // testing
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'

    testImplementation 'org.robolectric:robolectric:4.12.2'
    testImplementation 'org.conscrypt:conscrypt-openjdk-uber:2.5.2'

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "androidx.work:work-testing:$work_version"

    // mocking
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.3.1'

    // Core library
    testImplementation 'androidx.test:core-ktx:1.5.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'

    // room
    testImplementation "androidx.room:room-testing:$room_version"

    // leak canary
    leakCanaryImplementation 'com.squareup.leakcanary:leakcanary-android:2.14'

    // google Flavor
    nonfreeImplementation 'com.google.firebase:firebase-messaging:24.0.0'
    nonfreeImplementation 'com.google.android.play:review-ktx:2.0.1'

    // add Java 8+ API desugaring support
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
}

allOpen {
    annotation('de.taz.app.android.annotation.Mockable')
}

task generateStaticVersionInBuildGradle {
    doLast {
        println "Injecting build static build version to enable manifest parsing (for f-droid)"
        def scriptPath = buildscript.sourceFile.parentFile
        def injectVersions = "$scriptPath/inject_static_version.sh $tazVersionName $tazVersionCode $lmdVersionName $lmdVersionCode $buildscript.sourceFile.path".execute()
        injectVersions.waitForProcessOutput(System.out, System.err)
    }
}
