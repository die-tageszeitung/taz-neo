
apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.github.triplet.play'
apply plugin: 'io.sentry.android.gradle'

if (getGradle().getStartParameter().getTaskRequests().toString().toLowerCase().contains("nonfree")) {
    apply plugin: 'com.google.gms.google-services'
}

def keyStoreAvailable = false

file("../keystore.properties").with { propFile ->
    if (propFile.canRead()) {
        keyStoreAvailable = true
        println("Using keystore.properties file to sign APK")
    }
}

play {
    track = 'internal'
    serviceAccountCredentials = file('../play-publish.json')
}


def versionNameToCode = { name ->
    def majorDigits = 2
    def minorDigits = 2
    def patchDigits = 2
    def preReleaseTypeDigits = 1
    def preReleaseVersionDigits = 2
    def versionParts = name.split('-')
    def semverCore = versionParts[0]
    def preReleaseIdentifier = null
    if (versionParts.length >= 2) {
        preReleaseIdentifier = versionParts[1]
    }
    def versionNumbers = []
    semverCore.split("\\.").eachWithIndex { item, idx ->
        versionNumbers.add(Integer.parseInt(item))
    }
    def (major, minor, patch) = versionNumbers
    // 9 is reserved for releases without pre-release identifier
    def preReleaseTypeNumber = 9
    def preReleaseVersion = 0
    if (preReleaseIdentifier != null) {
        def (preReleaseType, preReleaseVersionParsed) = preReleaseIdentifier.split('\\.')
        preReleaseVersionParsed = Integer.parseInt(preReleaseVersionParsed)
        preReleaseVersion = preReleaseVersionParsed
        switch (preReleaseType) {
            case "alpha":
                preReleaseTypeNumber = 1
                break
            case "beta":
                preReleaseTypeNumber = 2
                break
            case "rc":
                preReleaseNumber = 3
                break
            default:
                throw Exception("Pre Release type need to be one of each 'alpha', 'beta' or 'rc'")
        }
    }
    return Integer.parseInt(
            major.toString().padLeft(majorDigits, '0') +
            minor.toString().padLeft(minorDigits, '0') +
            patch.toString().padLeft(patchDigits, '0') +
            preReleaseTypeNumber.toString().padLeft(preReleaseTypeDigits, '0') +
            preReleaseVersion.toString().padLeft(preReleaseVersionDigits, '0')
    )
}

def getVersionName = { ->
    def ENV = System.getenv()
    def ignoreDirty = ENV['VERSION_IGNORES_DIRTY_TREE']
    def proc
    if (ignoreDirty) {
        proc = 'git describe --tags'.execute()
    } else {
        proc = 'git describe --tags --dirty'.execute()
    }
    proc.waitFor()
    def versionName = proc.text.trim()
    println "This build has versionName: $versionName"
    return versionName
}

def getVersionCode = { ->
    try {
        def code = versionNameToCode(getVersionName())
        println "This build has versionCode: $code"
        return code
    } catch (e) {
        logger.warn(
                "Unable to determine versionCode from ${getVersionName()}, which is determined by the last git tag. " +
                "Refer to the README to learn about a proper version format")
        e.printStackTrace()
        return 1
    }
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "de.taz.app.android"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode getVersionCode()
        versionName getVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"
                ]
            }
        }
        vectorDrawables.useSupportLibrary = true
        resConfig "de"

        buildConfigField "Boolean", "MANUAL_UPDATE", "false"

        def ENV = System.getenv()
        def sentryEnvironment = ENV['SENTRY_ENVIRONMENT'] ?: 'local'
        println "Sentry environment: $sentryEnvironment"
        buildConfigField "String", "SENTRY_ENVIRONMENT", "\"${sentryEnvironment}\""
    }



    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += "-Xopt-in=kotlinx.serialization.ExperimentalSerializationApi,io.ktor.util.KtorExperimentalAPI"
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    flavorDimensions "source", "owner"

    productFlavors {
        taz {
            dimension "owner"
            applicationId "de.taz.android.app"
        }

        lmd {
            dimension "owner"
            applicationId "de.monde_diplomatique.android.app"
        }

        free {
            dimension "source"
            applicationIdSuffix ".free"
        }

        nonfree {
            dimension "source"
        }

    }

    signingConfigs {
        if (keyStoreAvailable) {
            keyStoreProperties {
                file("../keystore.properties").with { propFile ->
                    def properties = new Properties()
                    properties.load(new FileInputStream(propFile))
                    storeFile file('../' + properties['keystorePath'])
                    storePassword properties['keystorePassword']
                    keyAlias properties['keyAlias']
                    keyPassword properties['keyPassword']
                }
            }
        }
    }

    buildTypes {

        leakCanary {
            if (keyStoreAvailable) {
                signingConfig signingConfigs.keyStoreProperties
            }

            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig debug.signingConfig
        }
        debug {
            if (keyStoreAvailable) {
                signingConfig signingConfigs.keyStoreProperties
            }

            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            if (keyStoreAvailable) {
                signingConfig signingConfigs.keyStoreProperties
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        unminifiedRelease {
            if (keyStoreAvailable) {
                signingConfig signingConfigs.keyStoreProperties
            }
            minifyEnabled false
        }
        manualUpdateRelease {
            buildConfigField "Boolean", "MANUAL_UPDATE", "true"
            if (keyStoreAvailable) {
                signingConfig signingConfigs.keyStoreProperties
            }
            minifyEnabled false
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    playConfigs {
        register("nonfreeTazRelease") {

        }
    }

    packagingOptions {
        pickFirst "META-INF/AL2.0"
        pickFirst "META-INF/LGPL2.1"

        pickFirst 'win32-x86/attach_hotspot_windows.dll'
        pickFirst 'win32-x86-64/attach_hotspot_windows.dll'
        pickFirst 'META-INF/licenses/ASM'
    }
}

dependencies {
    def room_version = "2.2.5"
    def ktor_version = "1.4.2"
    def work_version = "2.4.0"
    def mockito_version = "3.6.28"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // this needs to be jdk 7 as otherwise it will not work on Android 5.1
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.fragment:fragment-ktx:1.2.5'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    // before updating make sure the coverflow looks good on xperia sp as well
    // this also breaks skip to current icon in CoverflowFragment
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.autofill:autofill:1.0.0'

    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    implementation 'androidx.browser:browser:1.2.0'

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'

    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation "io.ktor:ktor-client-android:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    testImplementation "io.ktor:ktor-client-mock:$ktor_version"
    androidTestImplementation "io.ktor:ktor-client-mock:$ktor_version"

    implementation 'org.conscrypt:conscrypt-android:2.5.1'

    implementation 'com.squareup.moshi:moshi-kotlin:1.10.0'
    kapt 'com.squareup.moshi:moshi-kotlin-codegen:1.10.0'

    implementation 'com.google.android.material:material:1.2.1'

    // coverflow
    implementation 'com.github.rubensousa:gravitysnaphelper:2.2.1'

    // stetho debug bridge
    implementation 'com.facebook.stetho:stetho:1.5.1'

    // error reports
    implementation 'io.sentry:sentry-android:2.3.2'
    implementation 'org.slf4j:slf4j-nop:1.7.30'

    // testing
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'junit:junit:4.13'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'
    testImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation "org.mockito:mockito-core:$mockito_version"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "androidx.work:work-testing:$work_version"

    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.9'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.9'
    testImplementation 'org.powermock:powermock-core:2.0.7'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'

    // Core library
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.3.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.3.0'

    // room
    androidTestImplementation 'androidx.room:room-testing:2.2.5'

    // leak canary
    leakCanaryImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'

    // google Flavor
    nonfreeImplementation 'com.google.firebase:firebase-messaging:21.0.0'
}

sentry {
    // Disables or enables the automatic configuration of proguard
    // for Sentry.  This injects a default config for proguard so
    // you don't need to do it manually.
    autoProguardConfig true

    // Enables or disables the automatic upload of mapping files
    // during a build.  If you disable this you'll need to manually
    // upload the mapping files with sentry-cli when you do a release.
    autoUpload true
}

// Open all classes and their methods annotated with @Mockable if this is a test build
def isTestTask = gradle.startParameter.taskNames.any { name ->
    name.split(':').last().startsWith('test') || name.split(':').last().endsWith('AndroidTest')
}
def isAndroidStudioTestTask = gradle.startParameter.taskNames.any { name ->
    name.endsWith 'UnitTestSources'
}
if (isTestTask || isAndroidStudioTestTask) {
    println "ATTENTION: Test build detected: kotlin classes annotated with @Mockable and its methods are opened"

    apply plugin: 'kotlin-allopen'
    allOpen {
        annotation('de.taz.app.android.annotation.Mockable')
    }
}

// This is a dependency of mockito - 3.x does not support apiLevel < 26, so we fix the dependency for now: https://github.com/mockito/mockito/issues/2007
allprojects {
    configurations.all {
        resolutionStrategy.force 'org.objenesis:objenesis:2.6'
    }
}
