image: registry.gitlab.alt.coop/ctrlaltcoop/android-docker:v0.0.3

variables:
  SENTRY_ENVIRONMENT: official
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_STRATEGY: recursive
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  MAVEN_LOCAL_REPOSITORY: "$CI_PROJECT_DIR/maven-local"
  GRADLE_OPTS: "-Dmaven.repo.local=$MAVEN_LOCAL_REPOSITORY -Dorg.gradle.caching=false"

stages:
  - prepare
  - test
  - build
  - publish

.prepareEnv:
  cache:
    # This cache includes the gradle wrapper and caches.
    # It is shared between all branches and jobs that share the same gradle version.
    # Note that this cache is quite big (about 1G) and will be copied and zipped at the start and
    # end of each job. It still seems to make sense to keep it - but we should remember to clear the
    # cache from the ci interface if the pipelines get slower due to cache copying.
    - key:
        files:
          - gradle/wrapper/gradle-wrapper.properties
      paths:
        - $GRADLE_USER_HOME/wrapper
        - $GRADLE_USER_HOME/caches

    # Unfortunately gitlab does not support using files from submodules or the .git directory
    # for cache keys. Thus we have to fall back to a global cache for mupdf binaries shared across
    # all jobs. This should be fine as the cache size wont grow much as we dont update mupdf often.
    - key: mupdf-local-mvn-repo
      paths:
        - ${MAVEN_LOCAL_REPOSITORY}/com/artifex/mupdf/fitz
      policy: pull

  before_script:
    # Download and extract non-free fonts used by the app
    - curl -u "${BUNDLE_SHARETOKEN_AND_PASS}" "https://cloud.alt.coop/public.php/webdav" -o bundle.tar
    - sudo tar --same-owner -xf bundle.tar
    - sudo chown -R circleci:circleci .

    # Setup the keystore from the CI secret variables
    - echo "keystorePassword=${ANDROID_KEYSTORE_PASSWORD/\\/\\\\}" >> keystore.properties
    - echo "keyPassword=${ANDROID_KEYSTORE_KEY_PASSWORD/\\/\\\\}" >> keystore.properties

buildMupdf:
  stage: prepare
  cache:
    - key: mupdf-local-mvn-repo
      paths:
        - ${MAVEN_LOCAL_REPOSITORY}/com/artifex/mupdf/fitz
      policy: pull-push
  script:
    - if ! ./scripts/test-mupdf-in-maven-local.sh; then ./scripts/publish-mupdf-to-maven-local.sh ; fi

lint:
  stage: test
  extends: .prepareEnv
  interruptible: true
  script:
    - ./gradlew --no-daemon --console=plain lintNonFreeTazProductionDebug lintNonfreeTazProductionRelease

unitTests:
  stage: test
  extends: .prepareEnv
  interruptible: true
  script:
    - ./gradlew --no-daemon --console=plain :app:testNonfreeTazProductionDebugUnitTest

integrationTests:
  stage: test
  extends: .prepareEnv
  interruptible: true
  script:
    - sudo -E ${ANDROID_HOME}/emulator/emulator @test -no-boot-anim -no-window &
    - sleep 30 && ./gradlew --no-daemon -Pci --console=plain :app:connectedNonfreeTazProductionDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.notAnnotation=de.taz.app.android.suite.UiTestSuite
  tags:
    - kvm-enabled

# UI Tests are disabled until we actually buy a device farm
.uiTests:
  stage: test
  extends: .prepareEnv
  variables:
    SENTRY_ENVIRONMENT: automatedTests
  script:
    - ./gradlew --no-daemon -Pci --console=plain :app:assembleNonfreeTazProductionDebug
    - ./gradlew --no-daemon -Pci --console=plain :app:assembleNonfreeTazProductionDebugAndroidTest
    - ./scripts/ui-tests-bitbar.sh app/build/outputs/apk/nonfreeTazProduction/debug/app-nonfree-taz-production-debug.apk app/build/outputs/apk/androidTest/nonfreeTazProduction/debug/app-nonfree-taz-production-debug-androidTest.apk 207052460
  only:
    - merge_requests
    - master

assembleAllFlavors:
  stage: build
  extends: .prepareEnv
  interruptible: true
  script:
    - ./gradlew --console=plain assembleNonfreeTazProductionDebug
    - ./gradlew --console=plain assembleNonfreeTazProductionRelease
    - ./gradlew --console=plain assembleFreeTazProductionDebug
    - ./gradlew --console=plain assembleFreeTazStagingDebug
    - ./gradlew --console=plain assembleFreeTazProductionManualUpdateRelease
    - ./gradlew --console=plain assembleFreeTazProductionUnminifiedRelease
  artifacts:
    paths:
      - app/build/outputs/

publishNextcloud:
  stage: publish
  variables:
    RELEASE_FOLDER: releases/${CI_COMMIT_TAG}
    NONFREE_DEBUG_APK_PATH: releases/${CI_COMMIT_TAG}/app-nonfree-taz-production-debug.apk
    NONFREE_RELEASE_APK_PATH: releases/${CI_COMMIT_TAG}/app-nonfree-taz-production-release.apk
    FREE_DEBUG_APK_PATH: releases/${CI_COMMIT_TAG}/app-free-taz-production-debug.apk
    FREE_STAGING_DEBUG_APK_PATH: releases/${CI_COMMIT_TAG}/app-free-taz-staging-debug.apk
    FREE_RELEASE_APK_PATH: releases/${CI_COMMIT_TAG}/app-free-taz-production-unminifiedRelease.apk
    FREE_MANUAL_UPDATE_RELEASE_APK_PATH: releases/${CI_COMMIT_TAG}/app-free-taz-production-manualUpdateRelease.apk
  script:
    - curl -X MKCOL "${NEXTCLOUD_RELEASE_URL}/remote.php/webdav/${RELEASE_FOLDER}" -u ${NEXTCLOUD_RELEASE_USER}:${NEXTCLOUD_RELEASE_PASSWORD}
    - curl -X PUT "${NEXTCLOUD_RELEASE_URL}/remote.php/webdav/${NONFREE_DEBUG_APK_PATH}" --data-binary @"app/build/outputs/apk/nonfreeTazProduction/debug/app-nonfree-taz-production-debug.apk" -u ${NEXTCLOUD_RELEASE_USER}:${NEXTCLOUD_RELEASE_PASSWORD}
    - curl -X PUT "${NEXTCLOUD_RELEASE_URL}/remote.php/webdav/${NONFREE_RELEASE_APK_PATH}" --data-binary @"app/build/outputs/apk/nonfreeTazProduction/release/app-nonfree-taz-production-release.apk" -u ${NEXTCLOUD_RELEASE_USER}:${NEXTCLOUD_RELEASE_PASSWORD}
    - curl -X PUT "${NEXTCLOUD_RELEASE_URL}/remote.php/webdav/${FREE_DEBUG_APK_PATH}" --data-binary @"app/build/outputs/apk/freeTazProduction/debug/app-free-taz-production-debug.apk" -u ${NEXTCLOUD_RELEASE_USER}:${NEXTCLOUD_RELEASE_PASSWORD}
    - curl -X PUT "${NEXTCLOUD_RELEASE_URL}/remote.php/webdav/${FREE_STAGING_DEBUG_APK_PATH}" --data-binary @"app/build/outputs/apk/freeTazStaging/debug/app-free-taz-staging-debug.apk" -u ${NEXTCLOUD_RELEASE_USER}:${NEXTCLOUD_RELEASE_PASSWORD}
    - curl -X PUT "${NEXTCLOUD_RELEASE_URL}/remote.php/webdav/${FREE_RELEASE_APK_PATH}" --data-binary @"app/build/outputs/apk/freeTazProduction/unminifiedRelease/app-free-taz-production-unminifiedRelease.apk" -u ${NEXTCLOUD_RELEASE_USER}:${NEXTCLOUD_RELEASE_PASSWORD}
    - curl -X PUT "${NEXTCLOUD_RELEASE_URL}/remote.php/webdav/${FREE_MANUAL_UPDATE_RELEASE_APK_PATH}" --data-binary @"app/build/outputs/apk/freeTazProduction/manualUpdateRelease/app-free-taz-production-manualUpdateRelease.apk" -u ${NEXTCLOUD_RELEASE_USER}:${NEXTCLOUD_RELEASE_PASSWORD}
    - ./scripts/publish-to-app-runde.sh
  only:
    - tags

publishGooglePlay:
  stage: publish
  extends: .prepareEnv
  dependencies: [] # Do not use any artifacts from the previous build stage in this job
  script:
    - ./gradlew --no-daemon --console=plain publishNonfreeTazProductionReleaseBundle
  only:
    - tags
  when: manual
